Goals for first iteration
-------------------------
-add files or directories to scan
-validate that permissions are suitable for scan targets
-assign priorities to scan targets
-recursively walk the scan targets
-hash files to find duplicates
-export a list of duplicates, with each set of duplicates on one line, ordered
 by priority
-full suite of unit and integration tests
-very basic GUI just to make sure model api is suitable
-basic command-line options
------------------------
IFile
    will have permissions
    will have a name
    will have a canonical/normalized name
IDirectory
    will have permissions
    will have a name
    will have a canonical/normalized name
    will have a collection of IFiles and/or IDirectories
ILink
    will act as a Proxy to an IFile or IDirectory

ScanTarget (maybe break down into Include and Exclude Targets?)
    will own an IFile or IDirectory
    will have a priority
    will have a regular expression (default to * if not set)
    bool for recursive scanning

ScanTargetCollection
    will own ScanTargets
    will make sure priorities make sense
    will act as a model layer
    eliminate redundant targets in scan list (the subgraph problem?)
-------------
Figure out how to handle localization soon. look into unicode libs

Move to cmake after development has tapered off

if I go multi-threaded, look into monitor objects, which
enscapsulate synchronization primitives so client classes don't have to bother
with it

should I monitor scan targets for changes? see dir_monitor.zip for a boost
asio example that will monitor directories, then fire a handler when something
is changed, or possibly the linux file monitoring api.
-----------------------

Here's how to temporarily disable a warning in GCC:
#ifdef __GNUC__                                     // pragma exists for GCC
#pragma GCC diagnostic push                         // saves the current diagnostic state
#pragma GCC diagnostic ignored "-Waggregate-return" // ignores the aggregate-return warning
#endif
void blah() {}                                      // calls the problematic function

#ifdef __GNUC__                                     // make sure were using gcc
#pragma GCC diagnostic pop                          // restore the old diagnostic state
#endif
-------------
boost's filesystem_error exception class inherits from boost's system_error exception class,
which inherits from std::runtime_error

According to http://lists.boost.org/boost-users/2011/06/68798.php -
It's difficult to tell, but it sounds like there was some kind of trouble with boost::exception with some boost
libraries, or some kind of political conflict. I don't know. So, what I intend to do, is use the non-throwing
versions of boost::filesystem functions, create exception classes deriving from boost::exception, and then construct
exception types out of boost::filesystem return codes. The filesystem_error is defined in filesystem/v3/operations.hpp

Distinguishing between reasons for not being readable(permissions or nonexisting) is only important for the scan targets.
During the directory walk, I can write permissions errors to a log or whatnot.
--------------
Directory Permissions
The executable bit on a directory means "searchable." The executable bit allows a process to set the directory as the
current working directory, and get information on the contained files (such as size, permissions, inode number, etc).
The readable bit allows you to get a directory listing, but if you know a file is there, you can still access the file.
